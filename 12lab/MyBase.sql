--Разработать сценарий, демон-стрирующий свойство атомар-ности явной транзакции 
--В блоке CATCH предусмот-реть выдачу соответствующих сообщений об ошибках. 
--Опробовать работу сценария при использовании различных операторов модификации таб-лиц.
use Krivtsova_MyBase;
select * from Показатели;

begin try
	begin tran -- начало явной транзакции
		delete Показатели where Важность = 15;
		insert Показатели values ('Налоги', 6);
		commit tran; -- фиксация транзакции
	end try
	begin catch
		print 'error: ' + case
		when error_number() = 2627 and patindex('%PK_Показатели%', error_message()) > 0
		then 'Дублирование товара'
		else 'Неизвестная ошибка: ' + cast(error_number() as varchar(5)) + error_message()
		end;
		if @@trancount > 0 rollback tran;
	end catch;

--Разработать сценарий, демонстрирующий применение оператора SAVE TRAN
--В блоке CATCH предусмотреть выдачу соответствующих сообщений об ошибках. 
--Опробовать работу сценария при использовании различных контрольных точек и различных операторов модификации таб-лиц.
declare @point varchar(32)
begin try
	begin tran
		delete Показатели where Важность = 15;
		set  @point = 'p1'; 
		save tran @point; -- контрольная точка
		insert Показатели values ('ВНП', 9);
		set  @point = 'p2'; 
		save tran @point;
		insert Показатели values ('ВВП', 8);
		commit tran;
	end try
	begin catch
		print 'error: ' + case
		when error_number() = 2627 and patindex('%PK_Показатели%', error_message()) > 0
		then 'Дублирование товара'
		else 'Неизвестная ошибка: ' + cast(error_number() as varchar(5)) + error_message()
		end;
		if @@trancount > 0
			begin
				print 'контрольная точка: ' + @point;
				rollback tran @point; -- откат к контрольной точке
				commit tran; -- фиксация изменений, выполненных до контрольной точки
			end;
	end catch;

--Разработать два сценария A и B 
--Сценарий A представляет собой явную транзакцию с уров-нем изолированности READ UNCOMMITED, 
--сценарий B – явную транзакцию с уровнем изолированности READ COMMITED (по умолчанию). 
--Сценарий A должен демонстрировать, что уровень READ UNCOMMITED допускает неподтвержденное, неповторяющееся и фантомное чтение. 
select * from Показатели;
select * from Предприятия;
    -- A ---
	set transaction isolation level READ UNCOMMITTED 
	begin transaction 
	-------------------------- t1 ------------------
	select @@SPID, 'insert Предприятия' 'результат', * from Предприятия 
	where [Название предприятия] = 'Евроремонт';
	select @@SPID, 'update Показатели'  'результат',  Название, 
    Важность from Показатели where Название = 'Прибыль';
	commit; 
	-------------------------- t2 -----------------
	--- B --	
	begin transaction 
	select @@SPID
	insert Предприятия values ('Азалия', 141, 'Волкова И.Д.'); 
	update Показатели set Важность  =  10 where Важность = 'ВВП' 
	-------------------------- t1 --------------------
	-------------------------- t2 --------------------
	rollback;

--Разработать два сценария A и B на примере базы данных 
--Сценарии A и В представляют собой явные транзакции с уровнем изолированности READ COMMITED. 
--Сценарий A должен демонстрировать, что уровень READ COMMITED не допускает не-подтвержденного чтения, 
--но при этом возможно неповторя-ющееся и фантомное чтение. 
    -- A ---
    set transaction isolation level READ COMMITTED 
	begin transaction 
	select count(*) from Показатели where Название = '%доход%';
	-------------------------- t1 ------------------ 
	-------------------------- t2 -----------------
	select  'update Показатели'  'результат', count(*) from Показатели  where Название = 'Прибыль';
	commit; 
	--- B ---	
	begin transaction 	  
	-------------------------- t1 --------------------
    update Показатели set Важность = 8 where Название = 'ВВП' 
    commit; 
	-------------------------- t2 --------------------	

--Разработать два сценария A и B на примере базы данных X_UNIVER. 
--Сценарий A представляет со-бой явную транзакцию с уров-нем изолированности REPEATABLE READ. 
--Сценарий B – явную транзакцию с уровнем изолированности READ COMMITED. 
--Сценарий A должен демон-стрировать, что уровень REAPETABLE READ не допус-кает неподтвержденного чтения и неповторяющегося чтения, 
--но при этом возможно фантомное чтение. 
    -- A ---
    set transaction isolation level  REPEATABLE READ 
	begin transaction 
	select Название from Показатели where Важность = '3';
	-------------------------- t1 ------------------ 
	-------------------------- t2 -----------------
	select  case
    when Важность = 10 then 'insert  Показатели'  else ' ' 
	end 'результат', Название from Показатели  where Важность = '3';
	commit; 
	--- B ---	
	begin transaction 	  
	-------------------------- t1 --------------------
    insert Показатели values ('Расход на сырье',11);
    commit; 
	-------------------------- t2 --------------------

--Разработать два сценария A и B на примере базы данных X_UNIVER. 
--Сценарий A представляет со-бой явную транзакцию с уров-нем изолированности SERIAL-IZABLE. 
--Сценарий B – явную транзак-цию с уровнем изолированно-сти READ COMMITED.
--Сценарий A должен демон-стрировать отсутствие фантом-ного, неподтвержденного и не-повторяющегося чтения.
    -- A ---
    set transaction isolation level SERIALIZABLE 
	begin transaction 
	delete Показатели where Важность = 11;  
    insert Показатели values ('Расход на сырье',11);
    update Показатели set Важность = 10 where Название = 'Расход нв сырье';
    select  Название from Показатели  where Важность = 10;
	-------------------------- t1 -----------------
    select  Название from Показатели  where Важность = 10;
	-------------------------- t2 ------------------ 
	commit; 	
	--- B ---	
	begin transaction 	  
	delete Показатели where Важность = 11;  
    insert Показатели values ('Расход на сырье',11);
    update Показатели set Важность = 10 where Название = 'Расход нв сырье';
    select  Название from Показатели  where Важность = 10;
    -------------------------- t1 --------------------
    commit; 
    select  Название from Показатели  where Важность = 10;
    -------------------------- t2 --------------------

--Разработать сценарий, демон-стрирующий свойства вложен-ных транзакций, на примере ба-зы данных X_UNIVER.
select * from Показатели;

begin tran
    insert Показатели values ('Расход на электроэнергию',12);
	begin tran
	 update Показатели set Важность=15 where Название = 'Расход на электроэнергию';
	 commit;
	 if @@TRANCOUNT > 0 
	  rollback;
	select * from Показатели;